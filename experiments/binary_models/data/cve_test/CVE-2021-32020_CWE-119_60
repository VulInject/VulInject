

/* Allocate the memory for the heap. */

#if ( configAPPLICATION_ALLOCATED_HEAP == 1 )



/* The application writer has already defined the array used for the RTOS

* heap - probably so it can be placed in a special segment or address. */

    extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];

#else

    static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];

#endif /* configAPPLICATION_ALLOCATED_HEAP */





/* Define the linked list structure.  This is used to link free blocks in order

 * of their size. */

typedef struct A_BLOCK_LINK

{

    struct A_BLOCK_LINK * pxNextFreeBlock; /*<< The next free block in the list. */

    size_t xBlockSize;                     /*<< The size of the free block. */

} BlockLink_t;





static const uint16_t heapSTRUCT_SIZE = ( ( sizeof( BlockLink_t ) + ( portBYTE_ALIGNMENT - 1 ) ) & ~portBYTE_ALIGNMENT_MASK );

#define heapMINIMUM_BLOCK_SIZE    ( ( size_t ) ( heapSTRUCT_SIZE * 2 ) )



/* Create a couple of list links to mark the start and end of the list. */

static BlockLink_t xStart, xEnd;



/* Keeps track of the number of free bytes remaining, but says nothing about

 * fragmentation. */

static size_t xFreeBytesRemaining = configADJUSTED_HEAP_SIZE;



/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */



/*

 * Insert a block into the list of free blocks - which is ordered by size of

 * the block.  Small blocks at the start of the list and large blocks at the end

 * of the list.

 */

#define prvInsertBlockIntoFreeList( pxBlockToInsert )                                                                               \

    {                                                                                                                               \

        BlockLink_t * pxIterator;                                                                                                   \

        size_t xBlockSize;                                                                                                          \

                                                                                                                                    \

        xBlockSize = pxBlockToInsert->xBlockSize;                                                                                   \

                                                                                                                                    \

        /* Iterate through the list until a block is found that has a larger size */                                                \
