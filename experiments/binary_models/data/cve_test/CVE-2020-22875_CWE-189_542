static Jsi_RC SysRunModuleCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,
    Jsi_Value **ret, Jsi_Func *funcPtr)
{
    Jsi_Value *v1 = Jsi_ValueArrayIndex(interp, args, 0),
    *v2 = Jsi_ValueArrayIndex(interp, args, 1);
    const char *cp, *mod = NULL;
    Jsi_RC rc = JSI_OK;
    Jsi_DString dStr = {}, nStr = {};
    Jsi_Value *cmd = NULL;
    Jsi_Value *vpargs, *vargs[2] = {};
    uint i, n = 0, siz, anum = 0, acnt=0;
    Jsi_Value **arr;
    Jsi_Obj *obj;
    const char *anam;
    bool isMain = jsi_isMain(interp);
    if (interp->isMain)
        interp->isMain = 0;
    
    if (v2 && !Jsi_ValueIsObjType(interp, v2, JSI_OT_ARRAY))
        return Jsi_LogError("arg 2: expected array|undefined");
    if (!v1 || Jsi_ValueIsNull(interp, v1)) {
        mod = interp->framePtr->fileName;
        if (mod) mod = Jsi_Strrchr(mod, '/');
        if (!mod) return JSI_ERROR;
        mod++;
        cp = Jsi_Strrchr(mod, '.');
        int len = (cp?(cp-mod):(int)Jsi_Strlen(mod));
        mod = Jsi_DSAppendLen(&dStr, mod, len);
    } else {
        mod = Jsi_ValueString(interp, v1, NULL);
        if (!mod) {
            if (Jsi_ValueIsObjType(interp, v1, JSI_OT_FUNCTION))
                cmd = v1;
            else
                return Jsi_LogError("arg 1: expected string|function|undefined");
        }
    }
    if (!v2 && isMain)
        v2 = interp->args;

    if (!cmd && mod) {
        cmd = Jsi_NameLookup(interp, mod);
        if (!cmd)
            cmd = jsi_LoadFunction(interp, mod, NULL);
    }
    if (!cmd || !Jsi_ValueIsObjType(interp, cmd, JSI_OT_FUNCTION)) {
        rc = Jsi_LogError("unknown command: %s", (mod?mod:""));
        goto done;
    }
    
    if (!v2) {
        obj = Jsi_ObjNewArray(interp, NULL, 0, 0);
        vargs[n++] = Jsi_ValueNewObj(interp, obj);
        vargs[n++] = Jsi_ValueNewObj(interp, obj=Jsi_ObjNew(interp));
    } else {
        arr = v2->d.obj->arr;
        siz = v2->d.obj->arrCnt;
        for (i=0; i<siz; i+=2) {
            anam = Jsi_ValueToString(interp, arr[i], NULL);
            if (i==0 && siz==1 && !Jsi_Strcmp(anam, "-h")) { anum=1; break; }
            if (anam[0] != '-') break;
            if (anam[0] == '-' && anam[1] == '-' && !anam[2]) {acnt++; break;}
            anum += 2;
        }
        if (anum != 1 && (anum>siz)) {
            if (anam)
                interp->lastPushStr = (char*)anam;
            rc = Jsi_LogError("missing argument");
            goto done;
        }
        obj = Jsi_ObjNewArray(interp, arr+anum+acnt, siz-anum-acnt, 0);
        vargs[n++] = Jsi_ValueNewObj(interp, obj);
        vargs[n++] = Jsi_ValueNewObj(interp, obj=Jsi_ObjNew(interp));
        bool isLong = 0;
        for (i=0; i<anum; i+=2) {
            int anLen;
            const char *astr, *anam = Jsi_ValueToString(interp, arr[i], &anLen);
            if (anum<=1 && !Jsi_Strcmp(anam,"-h") ) anam = "help";
            else if (anam && anam[0] == '-') anam++;
            else {
                rc = Jsi_LogError("bad option: %d", i);
                goto done;
            }
                
            Jsi_Value *aval;
            if  (anum==1)
                aval = Jsi_ValueNewBoolean(interp, isLong);
            else {
                bool bv;
                Jsi_Number nv;
                astr = Jsi_ValueToString(interp, arr[i+1], NULL);
                if (Jsi_GetBool(interp, astr, &bv) == JSI_OK) aval = Jsi_ValueNewBoolean(interp, bv);
                else if (Jsi_GetDouble(interp, astr, &nv) == JSI_OK) aval = Jsi_ValueNewNumber(interp, nv);
                else if (!Jsi_Strcmp(astr, "null"))  aval = Jsi_ValueNewNull(interp);
                else aval = arr[i+1];
            }
            Jsi_ObjInsert(interp, obj, anam, aval, 0);
        }
    }
    
    vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, n, 0));
    
    Jsi_IncrRefCount(interp, cmd);
    Jsi_IncrRefCount(interp, vpargs);
    for (i=0; i<n; i++)
        Jsi_IncrRefCount(interp, vargs[i]);
    rc = Jsi_FunctionInvoke(interp, cmd, vpargs, ret, NULL);
    Jsi_DecrRefCount(interp, cmd);
    for (i=0; i<n; i++)
        Jsi_DecrRefCount(interp, vargs[i]);
    Jsi_DecrRefCount(interp, vpargs);
    if (rc == JSI_OK && !Jsi_ValueIsUndef(interp, *ret) && isMain && funcPtr && funcPtr->callflags.bits.isdiscard) {
        Jsi_DSSetLength(&dStr, 0);
        cp = Jsi_ValueGetDString(interp, *ret, &dStr, 0);
        if (cp && (!(cp=Jsi_Strrchr(cp, '\n')) || cp[1]))
            Jsi_DSAppend(&dStr, "\n", NULL);
        Jsi_Puts(interp, jsi_Stdout, Jsi_DSValue(&dStr), -1);
    }

done:
    Jsi_DSFree(&dStr);
    Jsi_DSFree(&nStr);
    return rc;
}
