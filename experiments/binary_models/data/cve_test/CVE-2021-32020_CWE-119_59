
 *

 */

#include <stdlib.h>



/* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining

 * all the API functions to use the MPU wrappers.  That should only be done when

 * task.h is included from an application file. */

#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE



#include "FreeRTOS.h"

#include "task.h"



#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE



#if ( configSUPPORT_DYNAMIC_ALLOCATION == 0 )

    #error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0

#endif



/* Block sizes must not get too small. */

#define heapMINIMUM_BLOCK_SIZE    ( ( size_t ) ( xHeapStructSize << 1 ) )



/* Assumes 8bit bytes! */

#define heapBITS_PER_BYTE         ( ( size_t ) 8 )



/* Define the linked list structure.  This is used to link free blocks in order

 * of their memory address. */

typedef struct A_BLOCK_LINK

{

    struct A_BLOCK_LINK * pxNextFreeBlock; /*<< The next free block in the list. */

    size_t xBlockSize;                     /*<< The size of the free block. */

} BlockLink_t;



/*-----------------------------------------------------------*/



/*

 * Inserts a block of memory that is being freed into the correct position in

 * the list of free memory blocks.  The block being freed will be merged with

 * the block in front it and/or the block behind it if the memory blocks are

 * adjacent to each other.

 */

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert );



/*-----------------------------------------------------------*/



/* The size of the structure placed at the beginning of each allocated memory

 * block must by correctly byte aligned. */

static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT - 1 ) ) ) & ~( ( size_t ) portBYTE_ALIGNMENT_MASK );



/* Create a couple of list links to mark the start and end of the list. */

static BlockLink_t xStart, * pxEnd = NULL;



/* Keeps track of the number of calls to allocate and free memory as well as the

 * number of free bytes remaining, but says nothing about fragmentation. */

static size_t xFreeBytesRemaining = 0U;

static size_t xMinimumEverFreeBytesRemaining = 0U;

static size_t xNumberOfSuccessfulAllocations = 0;

static size_t xNumberOfSuccessfulFrees = 0;



/* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize

 * member of an BlockLink_t structure is set then the block belongs to the

 * application.  When the bit is free the block is still part of the free heap

 * space. */

static size_t xBlockAllocatedBit = 0;



/*-----------------------------------------------------------*/



void * pvPortMalloc( size_t xWantedSize )

{

    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;

    void * pvReturn = NULL;
