#if ( configAPPLICATION_ALLOCATED_HEAP == 1 )



/* The application writer has already defined the array used for the RTOS

* heap - probably so it can be placed in a special segment or address. */

    extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];

#else

    PRIVILEGED_DATA static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];

#endif /* configAPPLICATION_ALLOCATED_HEAP */



/* Define the linked list structure.  This is used to link free blocks in order

 * of their memory address. */

typedef struct A_BLOCK_LINK

{

    struct A_BLOCK_LINK * pxNextFreeBlock; /*<< The next free block in the list. */

    size_t xBlockSize;                     /*<< The size of the free block. */

} BlockLink_t;



/*-----------------------------------------------------------*/



/*

 * Inserts a block of memory that is being freed into the correct position in

 * the list of free memory blocks.  The block being freed will be merged with

 * the block in front it and/or the block behind it if the memory blocks are

 * adjacent to each other.

 */

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) PRIVILEGED_FUNCTION;



/*

 * Called automatically to setup the required heap structures the first time

 * pvPortMalloc() is called.

 */

static void prvHeapInit( void ) PRIVILEGED_FUNCTION;



/*-----------------------------------------------------------*/



/* The size of the structure placed at the beginning of each allocated memory

 * block must by correctly byte aligned. */

static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT - 1 ) ) ) & ~( ( size_t ) portBYTE_ALIGNMENT_MASK );



/* Create a couple of list links to mark the start and end of the list. */

PRIVILEGED_DATA static BlockLink_t xStart, * pxEnd = NULL;



/* Keeps track of the number of calls to allocate and free memory as well as the

 * number of free bytes remaining, but says nothing about fragmentation. */

PRIVILEGED_DATA static size_t xFreeBytesRemaining = 0U;

PRIVILEGED_DATA static size_t xMinimumEverFreeBytesRemaining = 0U;

PRIVILEGED_DATA static size_t xNumberOfSuccessfulAllocations = 0;

PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;



/* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize

 * member of an BlockLink_t structure is set then the block belongs to the

 * application.  When the bit is free the block is still part of the free heap

 * space. */

PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;



/*-----------------------------------------------------------*/



void * pvPortMalloc( size_t xWantedSize )

{

    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;

    void * pvReturn = NULL;



    vTaskSuspendAll();

    {

        /* If this is the first call to malloc then the heap will require

         * initialisation to setup the list of free blocks. */

        if( pxEnd == NULL )

        {

            prvHeapInit();

        }

        else

        {

            mtCOVERAGE_TEST_MARKER();

        }



